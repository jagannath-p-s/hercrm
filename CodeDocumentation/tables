create table
  public.access_logs (
    uid serial not null,
    user_id character varying(255) not null,
    timestamp timestamp without time zone not null,
    status integer not null,
    punch integer not null,
    constraint access_logs_pkey primary key (uid)
  ) tablespace pg_default;

create table
  public.staffs (
    id serial not null,
    username character varying(255) not null,
    useremail character varying(255) not null,
    password character varying(255) not null,
    role character varying(50) not null,
    mobile_number character varying(15) not null,
    employee_code character varying(50) not null,
    active boolean null default true,
    start_date timestamp with time zone not null,
    end_date timestamp with time zone not null,
    user_id text not null,
    salary numeric null,
    constraint staffs_pkey primary key (id),
    constraint staffs_employee_code_key unique (employee_code),
    constraint staffs_useremail_key unique (useremail)
  ) tablespace pg_default;

create trigger check_end_date_trigger before insert
or
update on staffs for each row
execute function update_active_status ();


create table
  public.equipment (
    id serial not null,
    equipment_name character varying(255) not null,
    model character varying(255) null,
    serial_number character varying(255) null,
    purchase_date date null,
    cost numeric(10, 2) null,
    depreciation_rate numeric(5, 2) null,
    current_value numeric(10, 2) null,
    maintenance_schedule character varying(255) null,
    last_maintenance_date date null,
    next_maintenance_date date null,
    constraint equipment_pkey primary key (id)
  ) tablespace pg_default;


create table
  public.users (
    id serial not null,
    user_id character varying(255) not null,
    active boolean null default false,
    subscription_end date null,
    name character varying(255) not null,
    date_of_birth date null,
    mobile_number_1 character varying(15) null,
    mobile_number_2 character varying(15) null,
    emergency_contact_number character varying(15) null,
    blood_group character varying(10) null,
    medical_conditions text null,
    allergies text null,
    injuries text null,
    current_medications text null,
    fitness_goals text null,
    role character varying(50) null,
    email character varying(255) not null,
    constraint users_pkey primary key (id),
    constraint users_email_unique unique (email),
    constraint users_user_id_key unique (user_id)
  ) tablespace pg_default;


  create table
  public.lead_sources (
    id serial not null,
    name text not null,
    created_at timestamp with time zone null default now(),
    constraint lead_sources_pkey primary key (id),
    constraint lead_sources_name_key unique (name)
  ) tablespace pg_default;

-- 1. Drop Existing Tables and Constraints if they exist
DROP TABLE IF EXISTS public.memberships CASCADE;
DROP TABLE IF EXISTS public.membership_plans CASCADE;
DROP TABLE IF EXISTS public.payment_modes CASCADE;

-- 2. Create `payment_modes` Table
CREATE TABLE public.payment_modes (
    id serial NOT NULL,
    name text NOT NULL, -- Payment mode name (e.g., cash, credit card)
    created_at timestamp with time zone NULL DEFAULT now(),
    CONSTRAINT payment_modes_pkey PRIMARY KEY (id),
    CONSTRAINT payment_modes_name_key UNIQUE (name)
) TABLESPACE pg_default;

create table
  public.memberships (
    id serial not null,
    user_id integer not null,
    membership_plan_id integer not null,
    payment_mode_id integer not null,
    start_date date not null,
    end_date date not null,
    admission_or_renewal_fee numeric(10, 2) not null default 0,
    additional_fee numeric(10, 2) not null default 0,
    gst_percentage numeric(5, 2) not null,
    credit_used numeric(10, 2) not null default 0,
    total_amount numeric(10, 2) not null,
    payment_date timestamp with time zone not null default now(),
    created_at timestamp with time zone null default now(),
    constraint memberships_pkey primary key (id),
    constraint memberships_membership_plan_id_fkey foreign key (membership_plan_id) references membership_plans (id) on delete cascade,
    constraint memberships_payment_mode_id_fkey foreign key (payment_mode_id) references payment_modes (id) on delete set null,
    constraint memberships_user_id_fkey foreign key (user_id) references users (id) on delete cascade
  ) tablespace pg_default;

-- 3. Create `membership_plans` Table
CREATE TABLE public.membership_plans (
    id serial NOT NULL,
    name text NOT NULL, -- Plan name (e.g., Monthly, Two-Month, Yearly)
    duration_in_months integer NOT NULL, -- Duration of the plan in months
    base_price numeric(10, 2) NOT NULL, -- Base price for the plan
    created_at timestamp with time zone NULL DEFAULT now(),
    CONSTRAINT membership_plans_pkey PRIMARY KEY (id),
    CONSTRAINT membership_plans_name_key UNIQUE (name)
) TABLESPACE pg_default;
create table
  public.memberships (
    id serial not null,
    user_id integer not null,
    membership_plan_id integer not null,
    payment_mode_id integer not null,
    start_date date not null,
    end_date date not null,
    admission_or_renewal_fee numeric(10, 2) not null default 0,
    additional_fee numeric(10, 2) not null default 0,
    gst_percentage numeric(5, 2) not null,
    credit_used numeric(10, 2) not null default 0,
    total_amount numeric(10, 2) not null,
    payment_date timestamp with time zone not null default now(),
    created_at timestamp with time zone null default now(),
    constraint memberships_pkey primary key (id),
    constraint memberships_membership_plan_id_fkey foreign key (membership_plan_id) references membership_plans (id) on delete cascade,
    constraint memberships_payment_mode_id_fkey foreign key (payment_mode_id) references payment_modes (id) on delete set null,
    constraint memberships_user_id_fkey foreign key (user_id) references users (id) on delete cascade
  ) tablespace pg_default;

  -- Create the `expense_categories` table
CREATE TABLE public.expense_categories (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


-- Create the `incomes` table
CREATE TABLE public.incomes (
    id SERIAL PRIMARY KEY,
    amount NUMERIC(10, 2) NOT NULL,
    description TEXT,
    income_date DATE NOT NULL DEFAULT CURRENT_DATE,
    user_id INTEGER, -- Optional: If income is linked to a user
    membership_id INTEGER, -- Optional: If income is linked to a membership
    payment_mode_id INTEGER, -- Optional: To record the payment mode
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE SET NULL,
    FOREIGN KEY (membership_id) REFERENCES memberships (id) ON DELETE SET NULL,
    FOREIGN KEY (payment_mode_id) REFERENCES payment_modes (id) ON DELETE SET NULL
);

-- Create the `expenses` table
CREATE TABLE public.expenses (
    id SERIAL PRIMARY KEY,
    amount NUMERIC(10, 2) NOT NULL,
    description TEXT,
    expense_date DATE NOT NULL DEFAULT CURRENT_DATE,
    category_id INTEGER, -- Optional: To categorize expenses
    staff_id INTEGER, -- Optional: If expense is linked to a staff member
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (category_id) REFERENCES expense_categories (id) ON DELETE SET NULL,
    FOREIGN KEY (staff_id) REFERENCES staffs (id) ON DELETE SET NULL
);

-- Create the `user_credits` table
CREATE TABLE public.user_credits (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    total_credits NUMERIC(10, 2) NOT NULL DEFAULT 0,
    used_credits NUMERIC(10, 2) NOT NULL DEFAULT 0,
    available_credits NUMERIC(10, 2) GENERATED ALWAYS AS (total_credits - used_credits) STORED,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

-- Create the `staff_salaries` table
CREATE TABLE public.staff_salaries (
    id SERIAL PRIMARY KEY,
    staff_id INTEGER NOT NULL,
    scheduled_payment_date DATE NOT NULL,
    actual_payment_date DATE,
    base_salary NUMERIC(10, 2) NOT NULL,
    advance_amount NUMERIC(10, 2) DEFAULT 0,
    advance_date DATE,
    deductions NUMERIC(10, 2) DEFAULT 0,
    bonuses NUMERIC(10, 2) DEFAULT 0,
    net_salary NUMERIC(10, 2) GENERATED ALWAYS AS (
        base_salary + bonuses - deductions - advance_amount
    ) STORED,
    status VARCHAR(20) NOT NULL DEFAULT 'Pending', -- e.g., Pending, Paid
    payment_mode_id INTEGER,
    remarks TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    FOREIGN KEY (staff_id) REFERENCES staffs (id) ON DELETE CASCADE,
    FOREIGN KEY (payment_mode_id) REFERENCES payment_modes (id) ON DELETE SET NULL
);


-- Function to get current staff inside
CREATE OR REPLACE FUNCTION public.get_current_staff_inside()
RETURNS TABLE(user_id text, is_inside boolean) AS $$
BEGIN
    RETURN QUERY
    SELECT al.user_id,
           (COUNT(*) % 2) = 1 AS is_inside
    FROM access_logs al
    GROUP BY al.user_id;
END;
$$ LANGUAGE plpgsql;



-- Create the trigger function
CREATE OR REPLACE FUNCTION update_incomes_on_membership_insert()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.incomes (
        amount,
        description,
        income_date,
        user_id,
        membership_id,
        payment_mode_id,
        created_at
    ) VALUES (
        NEW.total_amount,
        'Membership Payment',
        NEW.payment_date::date,
        NEW.user_id,
        NEW.id,
        NEW.payment_mode_id,
        NOW()
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger on the memberships table
CREATE TRIGGER trigger_update_incomes
AFTER INSERT ON public.memberships
FOR EACH ROW
EXECUTE FUNCTION update_incomes_on_membership_insert();
